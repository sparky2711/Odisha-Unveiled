{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\animi\\\\Downloads\\\\React-projects-master\\\\React-projects-master\\\\Abodbnb\\\\src\\\\components\\\\LocationMap.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport GoogleMapReact from 'google-map-react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst LocationFetcher = () => {\n  _s();\n  const [location, setLocation] = useState(null);\n  const [locationName, setLocationName] = useState('');\n  const handleClick = () => {\n    // Construct the API URL\n    const apiKey = 'AIzaSyDLA3nKBXB3YQjcxzlW-BLj8AgXl3VVArs';\n    const apiUrl = `https://maps.googleapis.com/maps/api/geocode/json?address=${locationName}&key=${apiKey}`;\n\n    // Fetch the location data from the API\n    fetch(apiUrl).then(response => response.json()).then(data => {\n      if (data.status === 'OK') {\n        const result = data.results[0];\n        setLocation({\n          lat: result.geometry.location.lat,\n          lng: result.geometry.location.lng\n        });\n      } else {\n        console.error(`Geocode error: ${data.status}`);\n      }\n    }).catch(error => console.error(error));\n  };\n  const handleLocationNameChange = event => {\n    setLocationName(event.target.value);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      value: locationName,\n      onChange: handleLocationNameChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleClick,\n      children: \"Fetch Location\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }, this), location && /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        height: '400px',\n        width: '100%'\n      },\n      children: /*#__PURE__*/_jsxDEV(GoogleMapReact, {\n        bootstrapURLKeys: {\n          key: 'YOUR_API_KEY'\n        },\n        defaultCenter: location,\n        defaultZoom: 15,\n        children: /*#__PURE__*/_jsxDEV(Marker, {\n          lat: location.lat,\n          lng: location.lng,\n          text: \"My Location\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 45,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 35,\n    columnNumber: 5\n  }, this);\n};\n_s(LocationFetcher, \"JFDBMmCgtvQ/oFE+1yF/SdnLi9Q=\");\n_c = LocationFetcher;\nconst Marker = _ref => {\n  let {\n    text\n  } = _ref;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: text\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 57,\n    columnNumber: 30\n  }, this);\n};\n_c2 = Marker;\nexport default LocationFetcher;\nvar _c, _c2;\n$RefreshReg$(_c, \"LocationFetcher\");\n$RefreshReg$(_c2, \"Marker\");","map":{"version":3,"names":["React","useState","GoogleMapReact","jsxDEV","_jsxDEV","LocationFetcher","_s","location","setLocation","locationName","setLocationName","handleClick","apiKey","apiUrl","fetch","then","response","json","data","status","result","results","lat","geometry","lng","console","error","catch","handleLocationNameChange","event","target","value","children","type","onChange","fileName","_jsxFileName","lineNumber","columnNumber","onClick","style","height","width","bootstrapURLKeys","key","defaultCenter","defaultZoom","Marker","text","_c","_ref","_c2","$RefreshReg$"],"sources":["C:/Users/animi/Downloads/React-projects-master/React-projects-master/Abodbnb/src/components/LocationMap.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport GoogleMapReact from 'google-map-react';\r\n\r\nconst LocationFetcher = () => {\r\n  const [location, setLocation] = useState(null);\r\n  const [locationName, setLocationName] = useState('');\r\n\r\n  const handleClick = () => {\r\n    // Construct the API URL\r\n    const apiKey = 'AIzaSyDLA3nKBXB3YQjcxzlW-BLj8AgXl3VVArs';\r\n    const apiUrl = `https://maps.googleapis.com/maps/api/geocode/json?address=${locationName}&key=${apiKey}`;\r\n\r\n    // Fetch the location data from the API\r\n    fetch(apiUrl)\r\n      .then(response => response.json())\r\n      .then(data => {\r\n        if (data.status === 'OK') {\r\n          const result = data.results[0];\r\n          setLocation({\r\n            lat: result.geometry.location.lat,\r\n            lng: result.geometry.location.lng\r\n          });\r\n        } else {\r\n          console.error(`Geocode error: ${data.status}`);\r\n        }\r\n      })\r\n      .catch(error => console.error(error));\r\n  }\r\n\r\n  const handleLocationNameChange = event => {\r\n    setLocationName(event.target.value);\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <input type=\"text\" value={locationName} onChange={handleLocationNameChange} />\r\n      <button onClick={handleClick}>Fetch Location</button>\r\n      {location && (\r\n        <div style={{ height: '400px', width: '100%' }}>\r\n          <GoogleMapReact\r\n            bootstrapURLKeys={{ key: 'YOUR_API_KEY' }}\r\n            defaultCenter={location}\r\n            defaultZoom={15}\r\n          >\r\n            <Marker\r\n              lat={location.lat}\r\n              lng={location.lng}\r\n              text=\"My Location\"\r\n            />\r\n          </GoogleMapReact>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nconst Marker = ({ text }) => <div>{text}</div>;\r\n\r\nexport default LocationFetcher;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}